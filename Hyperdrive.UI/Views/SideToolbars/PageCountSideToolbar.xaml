<UserControl x:Class="Hyperdrive.UI.Views.SideToolbars.PageCountSideToolbar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:Controls="clr-namespace:System.Windows.Controls;assembly=WPFMultiSelectTreeView" 
             xmlns:local="clr-namespace:Hyperdrive.UI.Views.SideToolbars"
             xmlns:demo="clr-namespace:Hyperdrive.UI"
	         xmlns:vm="clr-namespace:Hyperdrive.UI.ViewModel"
             mc:Ignorable="d" 
             DataContext="{Binding RelativeSource={RelativeSource Self}}"
             d:DesignHeight="450" d:DesignWidth="300"
             Loaded="OnLoad"
             IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.bIsFileOpen}">

    <UserControl.Resources>
        <!--
		Here the normal editor template is defined
		-->
        <DataTemplate x:Key="EditTemplate" DataType="{x:Type vm:TreeItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
                <Controls:EditTextBox
					Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Padding="2,0,0,0"/>
            </StackPanel>
        </DataTemplate>
        
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="{StaticResource BackgroundMainBrush}" BorderBrush="{StaticResource MainBorderBrush}" BorderThickness="1">
            <StackPanel Orientation="Horizontal" Height="28 " >
                <Button Content="Expand All" Click="ExpandAllNodesButton_Click" Padding="5 "/>
                <Button Content="Collapse All" Click="CollapseAllNodesButton_Click" Padding="5" />
            </StackPanel>
        </Border>
        
        <Controls:MultiSelectTreeView
            Grid.Row="1"
				Name="TheTreeView"
				ItemsSource="{Binding Children}"
				PreviewSelectionChanged="TheTreeView_PreviewSelectionChanged"
                Height="Auto">

            <Controls:MultiSelectTreeView.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Expand" Click="ExpandMenuItem_Click"/>
                    <Separator/>
                    <MenuItem Header="Rename" Visibility="Collapsed" Click="RenameMenuItem_Click"/>
                    <MenuItem Header="Delete" Visibility="Collapsed" Click="DeleteMenuItem_Click"/>
                    <MenuItem Header="Fit to 8.5x1" IsEnabled="False" />
                    <MenuItem Header="Fit to 11x17" IsEnabled="False" />
                </ContextMenu>
            </Controls:MultiSelectTreeView.ContextMenu>

            <Controls:MultiSelectTreeView.ItemContainerStyle>
                <Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
                    <!--
						Here the TreeViewItem's properties are connected with the ViewModel class.
						Basically you would make all MultiSelectTreeViewItem properties accessible
						in the view model class that you possibly want to get or set in order to
						determine or manipulate the view from the view model class.
						-->
                    <Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
                    <Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
                    <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
                    <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}"/>
                    <Setter Property="Remarks" Value="{Binding Remarks, Mode=TwoWay}"/>
                    <!--
						The ContentTemplateEdit property defines a DataTemplate that is applied
						instead of the normal viewing DataTemplate (definition below) when the item
						is in edit mode. If you do not need editing functionality or the default
						template is good for you, then you can omit this Setter.
						-->
                    <Setter Property="ContentTemplateEdit">
                        <Setter.Value>
                            <DataTemplate>
                                <!--
									NOTE:
									Instead of using a ContentControl which selects an editor template,
									you could directly define an editor template here which then applies
									to all item data types.
									EXAMPLE:
									<StackPanel Orientation="Horizontal">
										<Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
										<Controls:EditTextBox
											Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											Padding="2,0,0,0"/>
									</StackPanel>
									-->
                                <ContentControl>
                                    <StackPanel Orientation="Horizontal">
                                        <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
                                        <Controls:EditTextBox
											Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            
											Padding="2,0,0,0"/>
                                    </StackPanel>
                                </ContentControl>
									
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <!--
						The RemarksTemplate property defines a DataTemplate that is applied instead
						of the normal viewing DataTemplate. If you do not need remarks
						functionality or the default template is good for you, then you can omit
						this Setter.
						-->
                    <Setter Property="RemarksTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Foreground="#a0ff0000" FontStyle="Italic" Text="{Binding}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding}" Value="">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Controls:MultiSelectTreeView.ItemContainerStyle>

            <Controls:MultiSelectTreeView.Resources>
                <!--
					Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
					-->
                <HierarchicalDataTemplate DataType="{x:Type vm:TreeItemViewModel}" ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16" SnapsToDevicePixels="True"/>
                        <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" Padding="4,0,2,0"/>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </Controls:MultiSelectTreeView.Resources>
        </Controls:MultiSelectTreeView>
    </Grid>

    
</UserControl>
